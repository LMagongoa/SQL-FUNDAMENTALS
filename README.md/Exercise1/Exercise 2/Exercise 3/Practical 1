README.md/Exercise1/Exercise 2/Exercise 3/Practical 1

BrightLight Tutorials
Data Analytics

Exercise 1: SQL Fundamentals

Database: employees_db
Assume you have a table called employees with the following structure:


Questions

1. SELECT Statement
Write a SQL query to retrieve all columns from the employees table.
2. SELECT DISTINCT Statement
Write a SQL query to find all the unique departments in the employees table.
3. ORDER BY Statement
Write a SQL query to retrieve all employees' first and last names, ordered by salary in descending order.
4. LIMIT Statement
Write a SQL query to retrieve the top 5 highest-paid employees.
5. WHERE Statement
Write a SQL query to find employees who work in the IT department.
6. AND Statement
Write a SQL query to find employees who work in the Finance department AND have a salary greater than 58,000.
7. OR Statement
Write a SQL query to find employees who work in the HR department OR the Marketing department.
8. NOT Statement
Write a SQL query to find employees who do not work in the IT department.
9. IN Statement
Write a SQL query to find employees who are in the HR, IT, or Finance departments.
10. Combining Conditions
Write a SQL query to find employees who are in the IT department, have a salary greater than 50,000, and are located in New York.
11. Combining WHERE, AND, and ORDER BY
Write a SQL query to retrieve the first and last names of employees who work in the Finance or Marketing department, earn more than 52,000, and order the results by salary in descending order.
12. Combining SELECT DISTINCT, WHERE, and IN
Write a SQL query to find all the unique cities where employees work, excluding those in the IT and HR departments.
13. Combining WHERE, NOT, AND, and ORDER BY
Write a SQL query to retrieve employees who are NOT in the Finance department, have a salary greater than 50,000, and order the results by hire date in ascending order.
14. Combining WHERE, OR, IN, and LIMIT
Write a SQL query to find the first 3 employees who work in either Chicago or Los Angeles and belong to the IT or Marketing department.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BrightLight Data Analytics
SQL Exercise 2: Aggregate Functions & Grouping
Instructions:
1. Write on paper with a pen.
2. Draw tables of the final outcome.
3. In the SELECT statement, you can select the columns of your choice.
4. After completing this task, scan it to a PDF file and email it to: rofhiwa@brightlighttutorials.co.za
5. Submission Deadline: Friday, March 14, 2025, 00:00

6. Questions
   
1. COUNT() Function
Write a SQL query to find the total number of employees in the company.

2. SUM() Function
Write a SQL query to find the total salary paid to all employees in the IT department.

3. AVG() Function
Write a SQL query to calculate the average salary of employees in the HR department.

4. MIN() and MAX() Functions
Write a SQL query to find the highest and lowest salary in the company.

5. GROUP BY Statement
Write a SQL query to group employees by department and display the total salary paid in each department.

6. GROUP BY and COUNT()
Write a SQL query to count how many employees work in each city.

7. GROUP BY and ORDER BY
Write a SQL query to group employees by department, calculate the average salary in each department, and order the results in descending order of average salary.

8. HAVING Clause
Write a SQL query to find departments where the total salary paid exceeds 100,000. (Use GROUP BY and HAVING)

9. Combining GROUP BY, HAVING, and ORDER BY
Write a SQL query to list cities where more than one employee works, ordered by the number of employees in descending order.

10. Combining Aggregate Functions
Write a SQL query to find the department with the highest average salary.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL Practice Exercise 3: Joins, UNION, Filtering, and Aggregates
BrightLight Tutorials
Instructions:

1. Write answers on paper with a pen.
2. Draw tables of the final outcome.
3. In the SELECT statement, choose relevant columns to display, if not specified.
4. Scan the completed work into a PDF file and email it to: rofhiwa@brightlighttutorials.co.za
5. Submission Deadline: 25 March 2025, 00:00
 
7. Questions
   
1. SQL Joins
 
1.Retrieve all employees and their assigned projects using an INNER JOIN.
  o Return: EmployeeID, FirstName, LastName, Department, Salary, ProjectID, ProjectName, Budget, Status.
2.Retrieve all employees and their assigned projects, including employees who have no projects using a LEFT JOIN.
  o Return: EmployeeID, FirstName, LastName, Department, Salary, ProjectID, ProjectName, Budget, Status.
3.Retrieve all projects and their assigned employees, including projects that have no employees using a RIGHT JOIN.
  o Return: ProjectID, ProjectName, Budget, Status, EmployeeID, FirstName, LastName, Department, Salary.
4. Retrieve all employees and projects, including those without a match in either table using a FULL OUTER JOIN.
  o Return: EmployeeID, FirstName, LastName, Department, Salary, ProjectID, ProjectName, Budget, Status.

2. UNION & UNION ALL
   
5.Retrieve a list of all unique cities where employees are located and project statuses.
  o Return: Location (Rename the column to Location using an alias).
6. Retrieve a list of all cities where employees are located and project statuses, allowing duplicates.
  o Return: Location (Rename the column to Location using an alias).
  
3. Filtering Statements
   
7. Retrieve employees who earn more than 70,000.
  o Return: EmployeeID, FirstName, LastName, Department, Salary.
8. Retrieve employees working in either IT or Finance departments.
  o Return: EmployeeID, FirstName, LastName, Department, Salary.
9. Retrieve projects that are not yet completed.
  o Return: ProjectID, ProjectName, Budget, Status.
10. Retrieve projects that have a budget greater than 70,000 and are not completed.
  • Return: ProjectID, ProjectName, Budget, Status.
11. Retrieve employees from New York OR Toronto, ordered by salary in descending order.
  • Return: EmployeeID, FirstName, LastName, Department, Salary, City.
12. Retrieve the top 3 highest-paid employees.
  • Return: EmployeeID, FirstName, LastName, Department, Salary.

4. Aggregate Functions with GROUP BY & HAVING
   
13. Find the total salary per department, sorted in descending order.
  • Return: Department,TotalSalary (Rename SUM(Salary) as TotalSalary).
14. Find the average salary per city, but only include cities where the average salary is greater than 65,000.
  • Return: City, AverageSalary (Rename AVG(Salary) as AverageSalary).
15. Count the number of employees per department, including only departments with more than 1 employee.
  • Return: Department, EmployeeCount (Rename COUNT(EmployeeID) as EmployeeCount).
16. Retrieve the number of projects per status, but only include statuses with at least 2 projects.
  • Return: Status, ProjectCount (Rename COUNT(ProjectID) as ProjectCount).
17. Retrieve the total project budget per employee, but only for employees who are managing projects worth more than 150,000.
  • Return: EmployeeID, FirstName, LastName, TotalProjectBudget (Rename SUM(Budget) as TotalProjectBudget).
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BrightLight Data Analytics Coding Practical
Practical 1: SQL Fundamentals (Big Query-Basic SQL Syntax)
The following questions are designed to help you build a strong foundation in basic SQL syntax. You are provided with a dataset named retail_sales_dataset.csv. Upload this dataset to your Snowflake account and use it to answer the questions below.
Please follow the instructions below carefully:

1. Write one SQL query per question. Use proper formatting and indentation where necessary.
2. Each question tests a specific SQL concept. Read the question carefully and apply only the concept being tested (e.g., SELECT, WHERE, GROUP BY, etc.).
3. Do not combine multiple SQL concepts unless instructed to. For example, if the question asks for a SELECT DISTINCT, don't use WHERE unless specified.
4. Use the correct column names as provided in the dataset
5. Expected Output Columns are provided for each question. Your query must return exactly those columns in the result.
6. Don't worry about the actual data. Focus on getting the SQL syntax right.
7. Submit your completed SQL queries as a .sql
   
Table 1: Outlines the name and descriptions of the columns in the provided dataset “retail_sales_dateset.csv”

Questions

1. SELECT Statement
   
Q1. Display all columns for all transactions. Expected output: All columns
Q2. Display only the Transaction ID, Date, and Customer ID for all records. Expected output: Transaction ID, Date, Customer ID

2. SELECT DISTINCT Statement
   
Q3. Display all the distinct product categories in the dataset. Expected output: Product Category
Q4. Display all the distinct gender values in the dataset. Expected output: Gender

3. WHERE Clause
   
Q5. Display all transactions where the Age is greater than 40. Expected output: All columns
Q6. Display all transactions where the Price per Unit is between 100 and 500. Expected output: All columns
Q7. Display all transactions where the Product Category is either 'Beauty' or 'Electronics'. Expected output: All columns
Q8. Display all transactions where the Product Category is not 'Clothing'. Expected output: All columns
Q9. Display all transactions where the Quantity is greater than or equal to 3. Expected output: All columns

4. Aggregate Functions
   
Q10. Count the total number of transactions. Expected output: Total_Transactions
Q11. Find the average Age of customers. Expected output: Average_Age
Q12. Find the total quantity of products sold. Expected output: Total_Quantity
Q13. Find the maximum Total Amount spent in a single transaction. Expected output: Max_Total_Amount
Q14. Find the minimum Price per Unit in the dataset. Expected output: Min_Price_per_Unit

5. GROUP BY Statement
   
Q15. Find the number of transactions per Product Category. Expected output: Product Category, Transaction_Count
Q16. Find the total revenue (Total Amount) per gender. Expected output: Gender, Total_Revenue
Q17. Find the average Price per Unit per product category. Expected output: Product Category, Average_Price

6. HAVING Clause

Q18. Find the total revenue per product category where total revenue is greater than 10,000. Expected output: Product Category, Total_Revenue
Q19. Find the average quantity per product category where the average is more than 2. Expected output: Product Category, Average_Quantity

7. CASE Statement
    
Q20. Display a column called Spending_Level that shows 'High' if Total Amount > 1000, otherwise 'Low'. Expected output: Transaction ID, Total Amount, Spending_Level
Q21. Display a new column called Age_Group that labels customers as:
• 'Youth' if Age < 30
• 'Adult' if Age is between 30 and 59
• 'Senior' if Age >= 60 Expected output: Customer ID, Age, Age_Group
